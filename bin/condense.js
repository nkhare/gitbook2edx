// Generated by LiveScript 1.3.1
(function(){
  var glob, fs, promise, _, debug, uid, b64, y, $, processCode, escapeSection, getVerticals, _module;
  glob = require('glob');
  fs = require('fs');
  promise = require('bluebird');
  _ = require('lodash');
  debug = require('debug')(__filename);
  uid = require('uid');
  b64 = require('base64-url');
  y = require('js-yaml');
  $ = require('underscore.string');
  processCode = require('./code/process-code').processCode;
  promise.promisifyAll(fs);
  escapeSection = function(d, name){
    var ref$;
    if (((ref$ = d.code) != null ? ref$[name] : void 8) != null) {
      return d.code[name] = _.escape(d.code[name]);
    }
  };
  getVerticals = function(data){
    return promise.map(data.sections, function(d){
      d.urlName = uid(8);
      return processCode(d).then(function(d){
        if (d.code != null) {
          d.code.lang = d.lang;
          d.grader_payload = {
            payload: b64.encode(JSON.stringify(d.code))
          };
          d.grader_payload = JSON.stringify(d.grader_payload);
          escapeSection(d, 'base');
          escapeSection(d, 'solution');
        }
        return d;
      });
    });
  };
  _module = function(){
    var condense;
    condense = function(directory, sourceDir, config){
      var metadata, files, promised_files, res$, i$, len$, f;
      metadata = y.safeLoad(fs.readFileSync(config, 'utf-8'));
      metadata.course.origDir = sourceDir;
      metadata.course.displayName = metadata.course.name;
      metadata.course.name = $.slugify(metadata.course.number);
      metadata.organization.displayName = metadata.organization.name;
      metadata.organization.name = $.slugify(metadata.organization.name);
      files = glob.sync(directory + "/**/*.json");
      res$ = [];
      for (i$ = 0, len$ = files.length; i$ < len$; ++i$) {
        f = files[i$];
        res$.push(fs.readFileAsync(f, 'utf-8'));
      }
      promised_files = res$;
      return promise.all(promised_files).map(function(it){
        var data, level, matches;
        data = JSON.parse(it);
        level = data.progress.current.level;
        matches = /(\d)+.?(\d)*/.exec(level);
        if (matches) {
          return getVerticals(data).then(function(verticals){
            var sequential;
            sequential = {
              chapter: parseInt(matches[1]),
              title: data.progress.current.title,
              verticals: verticals
            };
            if (matches[2] != null) {
              sequential.section = parseInt(matches[2]);
            }
            sequential.section == null && (sequential.section = 0);
            sequential.displayName = sequential.title;
            sequential.name = $.slugify(sequential.displayName);
            sequential.urlName = sequential.name + ("-" + uid(8));
            return sequential;
          });
        } else {
          return undefined;
        }
      }).then(function(it){
        var grouped, res$, k, v, i$, len$;
        grouped = _.groupBy(it, 'chapter');
        res$ = [];
        for (k in grouped) {
          v = grouped[k];
          res$.push(v);
        }
        grouped = res$;
        res$ = [];
        for (i$ = 0, len$ = grouped.length; i$ < len$; ++i$) {
          v = grouped[i$];
          res$.push(_.sortBy(v, 'section'));
        }
        grouped = res$;
        grouped = _.map(grouped, function(it){
          it.displayName = it[0].displayName;
          it.urlName = it[0].urlName + "-" + uid(8);
          return it;
        });
        debug("All data gathered into a single structure");
        return _.extend(metadata, {
          chapters: grouped
        });
      });
    };
    return {
      condense: condense
    };
  };
  module.exports = _module();
}).call(this);
