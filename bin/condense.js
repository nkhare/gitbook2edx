// Generated by LiveScript 1.3.1
(function(){
  var glob, fs, bluebird, _, debug, y, $, _module;
  glob = require('glob');
  fs = require('fs');
  bluebird = require('bluebird');
  _ = require('lodash');
  debug = require('debug')(__filename);
  bluebird.promisifyAll(fs);
  y = require('js-yaml');
  $ = require('underscore.string');
  _module = function(){
    var condense;
    condense = function(directory, sourceDir, config){
      var metadata, files, promised_files, res$, i$, len$, f;
      metadata = y.safeLoad(fs.readFileSync(config, 'utf-8'));
      metadata.course.origDir = sourceDir;
      metadata.course.displayName = metadata.course.name;
      metadata.course.name = $.slugify(metadata.course.number);
      metadata.organization.displayName = metadata.organization.name;
      metadata.organization.name = $.slugify(metadata.organization.name);
      files = glob.sync(directory + "/**/*.json");
      res$ = [];
      for (i$ = 0, len$ = files.length; i$ < len$; ++i$) {
        f = files[i$];
        res$.push(fs.readFileAsync(f, 'utf-8'));
      }
      promised_files = res$;
      return bluebird.all(promised_files).map(function(it){
        var data, level, matches, ret;
        data = JSON.parse(it);
        level = data.progress.current.level;
        matches = /(\d)+.?(\d)*/.exec(level);
        if (matches) {
          ret = {
            chapter: parseInt(matches[1]),
            title: data.progress.current.title,
            content: data.sections
          };
          if (matches[2] != null) {
            ret.section = parseInt(matches[2]);
          }
          ret.section == null && (ret.section = 0);
          ret.displayName = ret.title;
          ret.name = $.slugify(ret.displayName);
          ret.urlName = ret.name;
          return ret;
        } else {
          return undefined;
        }
      }).then(function(it){
        var grouped, res$, k, v, i$, len$;
        grouped = _.groupBy(it, 'chapter');
        res$ = [];
        for (k in grouped) {
          v = grouped[k];
          res$.push(v);
        }
        grouped = res$;
        res$ = [];
        for (i$ = 0, len$ = grouped.length; i$ < len$; ++i$) {
          v = grouped[i$];
          res$.push(_.sortBy(v, 'section'));
        }
        grouped = res$;
        grouped = _.map(grouped, function(it){
          it.displayName = it[0].displayName;
          it.urlName = it[0].urlName;
          return it;
        });
        debug("All data gathered into a single structure");
        return _.extend(metadata, {
          chapters: grouped
        });
      });
    };
    return {
      condense: condense
    };
  };
  module.exports = _module();
}).call(this);
