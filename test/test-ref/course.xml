<course 
 url_name="2014-spring" 
 org="politecnico-di-milano-sede-di-bovisa" 
 course="80169"
 display_name="Informatica B"
 start=""
 end=""
 
 enrollment_start=""
 enrollment_end=""

 
 course_image="course-image.jpg"
 
 >
 
  <chapter display_name="Introduction" url_name="introduction">
  
    <sequential display_name="Introduction" url_name="introduction" >
     
      
       <vertical display_name="Introduction - Step 1" url_name="introduction-1">
        <html display_name="Introduction - Step 1">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h1 id="learn-javascript">Learn Javascript</h1>
<p>This book will teach you the basics of programming and Javascript. Whether you are an experienced programmer or not, this book is intended for everyone who wishes to learn the JavaScript programming language.</p>
<p>JavaScript (<em>JS for short</em>) is the programming language that enables web pages to respond to user interaction beyond the basic level. It was created in 1995, and is today one of the most famous and used programming languages.</p>
<p><strong>Note:</strong> This book has been generated using <a href="http://www.gitbook.io" target="_blank">GitBook</a> and is open source, feel free to contribute or signal issues on <a href="https://github.com/GitbookIO/javascript" target="_blank">GitHub</a>. You can download a <strong>PDF</strong> or <strong>ePUB</strong> version at <a href="https://www.gitbook.io/book/GitBookIO/javascript" target="_blank">https://www.gitbook.io/book/GitBookIO/javascript</a>.</p>

        </html> 
      </vertical>
      
     
    </sequential>
        
  </chapter>
 
  <chapter display_name="Basics" url_name="basics">
  
    <sequential display_name="Basics" url_name="basics" >
     
      
       <vertical display_name="Basics - Step 1" url_name="basics-1">
        <html display_name="Basics - Step 1">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h1 id="basics-about-programming">Basics about Programming</h1>
<p>In this first chapter, we&#39;ll learn the basics of programming and the Javascript language.</p>
<p>Programming means writing code. A book is made up of chapters, paragraphs, sentences, phrases, words and finally punctuation and letters, likewise a program can be broken down into smaller and smaller components. For now, the most important is a statement. A statement is analogous to a sentence in a book. On its own, it has structure and purpose, but without the context of the other statements around it, it isn&#39;t that meaningful.</p>
<p>A statement is more casually (and commonly) known as a <em>line of code</em>. That&#39;s because statements tend to be written on individual lines. As such, programs are read from top to bottom, left to right. You might be wondering what code (also called source code) is. That happens to be a broad term which can refer to the whole of the program or the smallest part. Therefore, a line of code is simply a line of your program.</p>
<p>Here is a simple example:</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> hello = <span class="hljs-string">"Hello"</span>;
<span class="hljs-keyword">var</span> world = <span class="hljs-string">"World"</span>;

<span class="hljs-comment">// Message equals "Hello World"</span>
<span class="hljs-keyword">var</span> message = hello + <span class="hljs-string">" "</span> + world;
</code></pre>
<p>This code can be executed by another program called an <em>interpreter</em> that will read the code, and execute all the statements in the right order.</p>

        </html> 
      </vertical>
      
     
    </sequential>
  
    <sequential display_name="Comments" url_name="comments" >
     
      
       <vertical display_name="Comments - Step 1" url_name="comments-1">
        <html display_name="Comments - Step 1">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h1 id="comments">Comments</h1>
<p>Comments are statements that will not be executed by the interpreter, comments are used to mark annotations for other programmers or small descriptions of what your code does, thus making it easier for others to understand what your code does.</p>
<p>In Javascript, comments can be written in 2 different ways:</p>
<ul>
<li>Line starting with <code>//</code>:</li>
</ul>
<pre><code class="lang-javascript"><span class="hljs-comment">// This is a comment, it will be ignored by the interpreter</span>
<span class="hljs-keyword">var</span> a = <span class="hljs-string">"this is a variable defined in a statement"</span>;
</code></pre>
<ul>
<li>Section of code starting with <code>/*</code>and ending with <code>*/</code>, this method is used for multi-line comments:</li>
</ul>
<pre><code class="lang-javascript"><span class="hljs-comment">/*
This is a multi-line comment,
it will be ignored by the interpreter
*/</span>
<span class="hljs-keyword">var</span> a = <span class="hljs-string">"this is a variable defined in a statement"</span>;
</code></pre>

        </html> 
      </vertical>
      
     
      
     
    </sequential>
  
    <sequential display_name="Variables" url_name="variables" >
     
      
       <vertical display_name="Variables - Step 1" url_name="variables-1">
        <html display_name="Variables - Step 1">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h1 id="variables">Variables</h1>
<p>The first step towards really understanding programming is looking back at algebra. If you remember it from school, algebra starts with writing terms such as the following.</p>
<pre><code>3 + 5 = 8
</code></pre><p>You start performing calculations when you introduce an unknown, for example x below:</p>
<pre><code>3 + x = 8
</code></pre><p>Shifting those around you can determine x:</p>
<pre><code>x = 8 - 3
-&gt; x = 5
</code></pre><p>When you introduce more than one you make your terms more flexible - you are using variables:</p>
<pre><code>x + y = 8
</code></pre><p>You can change the values of x and y and the formula can still be true:</p>
<pre><code>x = 4
y = 4
</code></pre><p>or</p>
<pre><code>x = 3
y = 5
</code></pre><p>The same is true for programming languages. In programming, variables are containers for values that change. Variables can hold all kind of values and also the results of computations. Variables have a name and a value separated by an equals sign (=). Variable names can be any letter or word, but bear in mind that there are restrictions from language to language of what you can use, as some words are reserved for other functionality.</p>
<p>Let&#39;s check out how it works in Javascript, The following code defines two variables, computes the result of adding the two and defines this result as a value of a third variable.</p>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> x = <span class="hljs-number">5</span>;
<span class="hljs-keyword">var</span> y = <span class="hljs-number">6</span>;
<span class="hljs-keyword">var</span> result = x + y;
</code></pre>

        </html> 
      </vertical>
      
     
    </sequential>
  
    <sequential display_name="Types" url_name="types" >
     
      
       <vertical display_name="Types - Step 1" url_name="types-1">
        <html display_name="Types - Step 1">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h1 id="variable-types">Variable types</h1>
<p>Computers are sophisticated and can make use of more complex variables than just numbers. This is where variable types come in. Variables come in several types and different languages support different types.</p>
<p>The most common types are:</p>
<ul>
<li><p><strong>Numbers</strong></p>
<ul>
<li><strong>Float</strong>: a number, like 1.21323, 4, -33.5, 100004 or 0.123</li>
<li><strong>Integer</strong>: a number like 1, 12, -33, 140 but not 1.233</li>
</ul>
</li>
<li><p><strong>String</strong>: a line of text like &quot;boat&quot;, &quot;elephant&quot; or &quot;damn, you are tall!&quot;</p>
</li>
<li><p><strong>Boolean</strong>: either true or false, but nothing else</p>
</li>
<li><p><strong>Arrays</strong>: a collection of values like: 1,2,3,4,&#39;I am bored now&#39;</p>
</li>
<li><p><strong>Objects</strong>: a representation of a more complex object</p>
</li>
<li><p><strong>null</strong>: a variable that contains null contains no valid Number, String, Boolean, Array, or Object</p>
</li>
<li><p><strong>undefined</strong>: the undefined value is obtained when you use an object property that does not exist, or a variable that has been declared, but has no value assigned to it.</p>
</li>
</ul>
<p>JavaScript is a <em>“loosely typed”</em> language, which means that you don&#39;t have to explicitly declare what type of data the variables are. You just need to use the <code>var</code> keyword to indicate that you are declaring a variable, and the interpreter will work out what data type you are using from the context, and use of quotes.</p>

        </html> 
      </vertical>
      
     
      
     
    </sequential>
  
    <sequential display_name="Equality" url_name="equality" >
     
      
       <vertical display_name="Equality - Step 1" url_name="equality-1">
        <html display_name="Equality - Step 1">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h1 id="equality">Equality</h1>
<p>Programmers frequently need to determine the equality of variables in relation to other variables. This is done using an equality operator.</p>
<p>The most basic equality operator is the <code>==</code> operator. This operator does everything it can to determine if two variables are equal, even if they are not of the same type. </p>
<p>For example, assume:</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> foo = <span class="hljs-number">42</span>;
<span class="hljs-keyword">var</span> bar = <span class="hljs-number">42</span>;
<span class="hljs-keyword">var</span> baz = <span class="hljs-string">"42"</span>;
<span class="hljs-keyword">var</span> qux = <span class="hljs-string">"life"</span>;
</code></pre>
<p><code>foo == bar</code> will evaluate to <code>true</code> and <code>baz == qux</code> will evaluate to <code>false</code>, as one would expect. However, <code>foo == baz</code> will <em>also</em> evaluate to <code>true</code> despite <code>foo</code> and <code>baz</code> being different types. Behind the scenes the <code>==</code> equality operator attempts to force its operands to the same type before determining their equality. This is in contrast to the <code>===</code> equality operator.</p>
<p>The <code>===</code> equality operator determines that two variables are equal if they are of the same type <em>and</em> have the same value. With the same assumptions as before, this means that <code>foo === bar</code> will still evaluate to <code>true</code>,  but <code>foo === baz</code> will now evaluate to <code>false</code>. <code>baz === qux</code> will still evaluate to <code>false</code>.</p>

        </html> 
      </vertical>
      
     
    </sequential>
        
  </chapter>
 
  <chapter display_name="Numbers" url_name="numbers">
  
    <sequential display_name="Numbers" url_name="numbers" >
     
      
       <vertical display_name="Numbers - Step 1" url_name="numbers-1">
        <html display_name="Numbers - Step 1">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h1 id="numbers">Numbers</h1>
<p>JavaScript has <strong>only one type of numbers</strong> – 64-bit float point. It&#39;s the same as Java&#39;s <code>double</code>. Unlike most other programming languages, there is no separate integer type, so 1 and 1.0 are the same value.</p>
<p>In this chapter, we&#39;ll learn how to create numbers and perform operations on them (like additions and subtractions).</p>

        </html> 
      </vertical>
      
     
    </sequential>
  
    <sequential display_name="Creation" url_name="creation" >
     
      
       <vertical display_name="Creation - Step 1" url_name="creation-1">
        <html display_name="Creation - Step 1">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h1 id="creation">Creation</h1>
<p>Creating a number is easy, it can be done just like for any other variable type using the <code>var</code> keyword.</p>
<p>Numbers can be created from a constant value:</p>
<pre><code>// This is a float:
var a = 1.2;

// This is an integer:
var b = 10;
</code></pre><p>Or from the value of another variable:</p>
<pre><code>var a = 2;
var b = a;
</code></pre>
        </html> 
      </vertical>
      
     
      
     
    </sequential>
  
    <sequential display_name="Basic Operators" url_name="basic-operators" >
     
      
       <vertical display_name="Basic Operators - Step 1" url_name="basic-operators-1">
        <html display_name="Basic Operators - Step 1">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h1 id="operators">Operators</h1>
<p>You can apply mathematic operations to numbers using some basic operators like:</p>
<ul>
<li><strong>Addition</strong>: <code>c = a + b</code></li>
<li><strong>Subtraction</strong>: <code>c = a - b</code></li>
<li><strong>Multiplication</strong>: <code>c = a * b</code></li>
<li><strong>Division</strong>: <code>c = a / b</code></li>
</ul>
<p>You can use parentheses just like in math to separate and group expressions: <code>c = (a / b) + d</code></p>

        </html> 
      </vertical>
      
     
      
     
    </sequential>
  
    <sequential display_name="Advanced Operators" url_name="advanced-operators" >
     
      
       <vertical display_name="Advanced Operators - Step 1" url_name="advanced-operators-1">
        <html display_name="Advanced Operators - Step 1">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h1 id="advanced-operators">Advanced Operators</h1>
<p>Some advanced operators can be used, such as:</p>
<ul>
<li><strong>Modulus (division remainder)</strong>: <code>x = y % 2</code></li>
<li><strong>Increment</strong>: Given a = 5<ul>
<li><code>c = a++</code>, Results: c = 5 and a = 6</li>
<li><code>c = ++a</code>, Results: c = 6 and a = 6</li>
</ul>
</li>
<li><strong>Decrement</strong>: Given a = 5<ul>
<li><code>c = a--</code>, Results: c = 5 and a = 4</li>
<li><code>c = --a</code>, Results: c = 4 and a = 4</li>
</ul>
</li>
</ul>

        </html> 
      </vertical>
      
     
      
     
    </sequential>
        
  </chapter>
 
  <chapter display_name="Strings" url_name="strings">
  
    <sequential display_name="Strings" url_name="strings" >
     
      
       <vertical display_name="Strings - Step 1" url_name="strings-1">
        <html display_name="Strings - Step 1">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h1 id="strings">Strings</h1>
<p>JavaScript strings share many similarities with string implementations from other high-level languages. They represent text based messages and data.</p>
<p>In this course we will cover the basics. How to create new strings and perform common operations on them.</p>
<p>Here is an example of a string:</p>
<pre><code class="lang-javascript"><span class="hljs-string">"Hello World"</span>
</code></pre>

        </html> 
      </vertical>
      
     
    </sequential>
  
    <sequential display_name="Creation" url_name="creation" >
     
      
       <vertical display_name="Creation - Step 1" url_name="creation-1">
        <html display_name="Creation - Step 1">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h1 id="creation">Creation</h1>
<p>You can define strings in JavaScript by enclosing the text in single quotes or double quotes:</p>
<pre><code class="lang-js"><span class="hljs-comment">// Single quotes can be used</span>
<span class="hljs-keyword">var</span> str = <span class="hljs-string">'Our lovely string'</span>;

<span class="hljs-comment">// Double quotes as well</span>
<span class="hljs-keyword">var</span> otherStr = <span class="hljs-string">"Another nice string"</span>;
</code></pre>
<p>In Javascript, Strings can contain UTF-8 characters:</p>
<pre><code class="lang-js"><span class="hljs-string">"中文 español English हिन्दी العربية português বাংলা русский 日本語 ਪੰਜਾਬੀ 한국어"</span>;
</code></pre>
<p><strong>Note:</strong> Strings can not be subtracted, multiplied or divided.</p>

        </html> 
      </vertical>
      
     
      
     
    </sequential>
  
    <sequential display_name="Concatenation" url_name="concatenation" >
     
      
       <vertical display_name="Concatenation - Step 1" url_name="concatenation-1">
        <html display_name="Concatenation - Step 1">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h1 id="concatenation">Concatenation</h1>
<p>Concatenation involves adding two or more strings together, creating a larger string containing the combined data of those original strings. This is done in JavaScript using the <strong>+</strong> operator.</p>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> bigStr = <span class="hljs-string">'Hi '</span> + <span class="hljs-string">'JS strings are nice '</span> + <span class="hljs-string">'and '</span> + <span class="hljs-string">'easy to add'</span>;
</code></pre>

        </html> 
      </vertical>
      
     
      
     
    </sequential>
  
    <sequential display_name="Length" url_name="length" >
     
      
       <vertical display_name="Length - Step 1" url_name="length-1">
        <html display_name="Length - Step 1">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h1 id="length">Length</h1>
<p>It&#39;s easy in Javascript to know how many characters are in string using the property <code>.length</code>.</p>
<pre><code class="lang-js"><span class="hljs-comment">// Just use the property .length</span>
<span class="hljs-keyword">var</span> size = <span class="hljs-string">'Our lovely string'</span>.length;
</code></pre>
<p><strong>Note:</strong> Strings can not be substracted, multiplied or divided.</p>

        </html> 
      </vertical>
      
     
      
     
    </sequential>
        
  </chapter>
 
  <chapter display_name="Conditional Logic" url_name="conditional-logic">
  
    <sequential display_name="Conditional Logic" url_name="conditional-logic" >
     
      
       <vertical display_name="Conditional Logic - Step 1" url_name="conditional-logic-1">
        <html display_name="Conditional Logic - Step 1">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h1 id="conditional-logic">Conditional Logic</h1>
<p>A condition is a test for something. Conditions are very important for programming, in several ways:</p>
<p>First of all conditions can be used to ensure that your program works, regardless of what data you throw at it for processing. If you blindly trust data, you’ll get into trouble and your programs will fail. If you test that the thing you want to do is possible and has all the required information in the right format, that won’t happen, and your program will be a lot more stable. Taking such precautions is also known as programming defensively.</p>
<p>The other thing conditions can do for you is allow for branching. You might have encountered branching diagrams before, for example when filling out a form. Basically, this refers to executing different “branches” (parts) of code, depending on if the condition is met or not.</p>
<p>In this chapter, we&#39;ll learn the base of conditional logic in Javascript.</p>

        </html> 
      </vertical>
      
     
    </sequential>
  
    <sequential display_name="If" url_name="if" >
     
      
       <vertical display_name="If - Step 1" url_name="if-1">
        <html display_name="If - Step 1">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h1 id="condition-if">Condition If</h1>
<p>The easiest condition is an if statement and its syntax is <code>if(condition){ do this … }</code>. The condition has to be true for the code inside the curly braces to be executed. You can for example test a string and set the value of another string dependent on its value:</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> country = <span class="hljs-string">'France'</span>;
<span class="hljs-keyword">var</span> weather;
<span class="hljs-keyword">var</span> food;
<span class="hljs-keyword">var</span> currency;

<span class="hljs-keyword">if</span>(country === <span class="hljs-string">'England'</span>) {
    weather = <span class="hljs-string">'horrible'</span>;
    food = <span class="hljs-string">'filling'</span>;
    currency = <span class="hljs-string">'pound sterling'</span>;
}

<span class="hljs-keyword">if</span>(country === <span class="hljs-string">'France'</span>) {
    weather = <span class="hljs-string">'nice'</span>;
    food = <span class="hljs-string">'stunning, but hardly ever vegetarian'</span>;
    currency = <span class="hljs-string">'funny, small and colourful'</span>;
}

<span class="hljs-keyword">if</span>(country === <span class="hljs-string">'Germany'</span>) {
    weather = <span class="hljs-string">'average'</span>;
    food = <span class="hljs-string">'wurst thing ever'</span>;
    currency = <span class="hljs-string">'funny, small and colourful'</span>;
}

<span class="hljs-keyword">var</span> message = <span class="hljs-string">'this is '</span> + country + <span class="hljs-string">', the weather is '</span> +
            weather + <span class="hljs-string">', the food is '</span> + food + <span class="hljs-string">' and the '</span> +
            <span class="hljs-string">'currency is '</span> + currency;
</code></pre>
<p><strong>Note:</strong> Conditions can also be nested.</p>

        </html> 
      </vertical>
      
     
      
     
    </sequential>
  
    <sequential display_name="Else" url_name="else" >
     
      
       <vertical display_name="Else - Step 1" url_name="else-1">
        <html display_name="Else - Step 1">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h1 id="else">Else</h1>
<p>There is also an <code>else</code> clause that will be applied when the first condition isn’t true. This is very powerful if you want to react to any value, but single out one in particular for special treatment:</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> umbrellaMandatory;

<span class="hljs-keyword">if</span>(country === <span class="hljs-string">'England'</span>){
    umbrellaMandatory = <span class="hljs-literal">true</span>;
} <span class="hljs-keyword">else</span> {
    umbrellaMandatory = <span class="hljs-literal">false</span>;
}
</code></pre>
<p>The <code>else</code> clause can be joined with another <code>if</code>. Lets remake the example from the previous article:</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">if</span>(country === <span class="hljs-string">'England'</span>) {
    ...
} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(country === <span class="hljs-string">'France'</span>) {
    ...
} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(country === <span class="hljs-string">'Germany'</span>) {
    ...
}
</code></pre>

        </html> 
      </vertical>
      
     
      
     
    </sequential>
  
    <sequential display_name="Comparators" url_name="comparators" >
     
      
       <vertical display_name="Comparators - Step 1" url_name="comparators-1">
        <html display_name="Comparators - Step 1">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h1 id="comparators">Comparators</h1>
<p>Lets now focus on the conditional part:</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">if</span> (country === <span class="hljs-string">"France"</span>) {
    ...
}
</code></pre>
<p>The conditional part is the variable <code>country</code> followed by the three equal signs (<code>===</code>). Three equal signs tests if the variable <code>country</code> has both the correct value (<code>France</code>) and also the correct type (<code>String</code>). You can test conditions with double equal signs, too, however a conditional such as <code>if (x == 5)</code> would then return true for both <code>var x = 5;</code> and <code>var x = &quot;5&quot;;</code>. Depending on what your program is doing, this could make quite a difference.  It is highly recommended as a best practice that you always compare equality with three equal signs (<code>===</code> and <code>!==</code>) instead of two (<code>==</code> and <code>!=</code>).</p>
<p>Other conditional test:</p>
<ul>
<li><code>x &gt; a</code>: is x bigger than a?</li>
<li><code>x &lt; a</code>: is x less than a?</li>
<li><code>x &lt;= a</code>: is x less than or equal to a?</li>
<li><code>x &gt;=a</code>: is x greater than or equal to a?</li>
<li><code>x != a</code>: is x not a?</li>
<li><code>x</code>: does x exist?</li>
</ul>

        </html> 
      </vertical>
      
     
      
     
      
       <vertical display_name="Comparators - Step 3" url_name="comparators-3">
        <html display_name="Comparators - Step 3">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h2 id="logical-comparison">Logical Comparison</h2>
<p> In order to avoid the if-else hassle, simple logical comparisons can be utilised.</p>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> topper = (marks &gt; <span class="hljs-number">85</span>) ? <span class="hljs-string">"YES"</span> : <span class="hljs-string">"NO"</span>;
</code></pre>
<p>In the above example, <code>?</code> is a logical operator. The code says that if the value of marks is greater than 85 i.e. <code>marks &gt; 85</code> , then <code>topper = YES</code> ; otherwise <code>topper = NO</code> . Basically, if the comparison condition proves true, the first argument is accessed and if the comparison condition is false , the second argument is accessed.</p>

        </html> 
      </vertical>
      
     
    </sequential>
  
    <sequential display_name="Concatenate" url_name="concatenate" >
     
      
       <vertical display_name="Concatenate - Step 1" url_name="concatenate-1">
        <html display_name="Concatenate - Step 1">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h1 id="concatenate-conditions">Concatenate conditions</h1>
<p>Furthermore you can concatenate different conditions with &quot;or” or “and” statements, to test whether either statement is true, or both are true, respectively.</p>
<p>In JavaScript “or” is written as <code>||</code> and “and” is written as <code>&amp;&amp;</code>.</p>
<p>Say you want to test if the value of x is between 10 and 20—you could do that with a condition stating:</p>
<pre><code>if(x &gt; 10 &amp;&amp; x &lt; 20) {
    ...
}
</code></pre><p>If you want to make sure that country is either “England” or “Germany” you use:</p>
<pre><code>if(country === &#39;England&#39; || country === &#39;Germany&#39;) {
    ...
}
</code></pre><p><strong>Note</strong>: Just like operations on numbers, Condtions can be grouped using parenthesis, ex: <code>if ( (name === &quot;John&quot; || name === &quot;Jennifer&quot;) &amp;&amp; country === &quot;France&quot;)</code>.</p>

        </html> 
      </vertical>
      
     
      
     
    </sequential>
        
  </chapter>
 
  <chapter display_name="Arrays" url_name="arrays">
  
    <sequential display_name="Arrays" url_name="arrays" >
     
      
       <vertical display_name="Arrays - Step 1" url_name="arrays-1">
        <html display_name="Arrays - Step 1">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h1 id="arrays">Arrays</h1>
<p>Arrays are a fundamental part of programming. An array is a list of data. We can store a lot of data in one variable, which makes our code more readable and easier to understand. It also makes it much easier to perform functions on related data.</p>
<p>The data in arrays are called <strong>elements</strong>.</p>
<p>Here is a simple array:</p>
<pre><code class="lang-javascript"><span class="hljs-comment">// 1, 1, 2, 3, 5, and 8 are the elements in this array</span>
<span class="hljs-keyword">var</span> numbers = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>];
</code></pre>

        </html> 
      </vertical>
      
     
    </sequential>
  
    <sequential display_name="Indices" url_name="indices" >
     
      
       <vertical display_name="Indices - Step 1" url_name="indices-1">
        <html display_name="Indices - Step 1">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h1 id="indices">Indices</h1>
<p>So you have your array of data elements, but what if you want to access a specific element? That is where indices come in. An <strong>index</strong> refers to a spot in the array. indices logically progress one by one, but it should be noted that the first index in an array is 0, as it is in most languages. Brackets [] are used to signify you are referring to an index of an array.</p>
<pre><code class="lang-javascript"><span class="hljs-comment">// This is an array of strings</span>
<span class="hljs-keyword">var</span> fruits = [<span class="hljs-string">"apple"</span>, <span class="hljs-string">"banana"</span>, <span class="hljs-string">"pineapple"</span>, <span class="hljs-string">"strawberry"</span>];

<span class="hljs-comment">// We set the variable banana to the value of the second element of</span>
<span class="hljs-comment">// the fruits array. Remember that indices start at 0, so 1 is the</span>
<span class="hljs-comment">// second element. Result: banana = "banana"</span>
<span class="hljs-keyword">var</span> banana = fruits[<span class="hljs-number">1</span>];
</code></pre>

        </html> 
      </vertical>
      
     
      
     
    </sequential>
  
    <sequential display_name="Length" url_name="length" >
     
      
       <vertical display_name="Length - Step 1" url_name="length-1">
        <html display_name="Length - Step 1">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h1 id="length">Length</h1>
<p>Arrays have a property called length, and it&#39;s pretty much exactly as it sounds, it&#39;s the length of the array.</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> array = [<span class="hljs-number">1</span> , <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];

<span class="hljs-comment">// Result: l = 3</span>
<span class="hljs-keyword">var</span> l = array.length;
</code></pre>

        </html> 
      </vertical>
      
     
      
     
    </sequential>
        
  </chapter>
 
  <chapter display_name="Loops" url_name="loops">
  
    <sequential display_name="Loops" url_name="loops" >
     
      
       <vertical display_name="Loops - Step 1" url_name="loops-1">
        <html display_name="Loops - Step 1">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h1 id="loops">Loops</h1>
<p>Loops are repetitive conditions where one variable in the loop changes. Loops are handy, if you want to run the same code over and over again, each time with a different value.</p>
<p>Instead of writing:</p>
<pre><code class="lang-javascript">doThing(cars[<span class="hljs-number">0</span>]);
doThing(cars[<span class="hljs-number">1</span>]);
doThing(cars[<span class="hljs-number">2</span>]);
doThing(cars[<span class="hljs-number">3</span>]);
doThing(cars[<span class="hljs-number">4</span>]);
</code></pre>
<p>You can write:</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i &lt; cars.length; i++) { 
    doThing(cars[i]);
}
</code></pre>

        </html> 
      </vertical>
      
     
    </sequential>
  
    <sequential display_name="For" url_name="for" >
     
      
       <vertical display_name="For - Step 1" url_name="for-1">
        <html display_name="For - Step 1">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h1 id="for-loop">For Loop</h1>
<p>The easiest form of a loop is the for statement. This one has a syntax that is similar to an if statement, but with more options:</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">for</span>(condition; end condition; change){
    <span class="hljs-comment">// do it, do it now</span>
}
</code></pre>
<p>Lets for example see how to execute the same code ten-times using a <code>for</code> loop:</p>
<pre><code>for(var i = 0; i &lt; 10; i = i + 1){
    // do this code ten-times
}
</code></pre><blockquote>
<p><strong><em>Note</em></strong>: <code>i = i + 1</code> can be written <code>i++</code>.</p>
</blockquote>

        </html> 
      </vertical>
      
     
      
     
    </sequential>
  
    <sequential display_name="While" url_name="while" >
     
      
       <vertical display_name="While - Step 1" url_name="while-1">
        <html display_name="While - Step 1">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h1 id="while-loop">While Loop</h1>
<p>While Loops repetitively execute a block of code as long as a specified condition is true.</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">while</span>(condition){
    <span class="hljs-comment">// do it as long as condition is true</span>
}
</code></pre>
<p>For example, the loop in this example will repetitively execute its block of code as long as the variable i is less than 5:</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, x = <span class="hljs-string">""</span>;
<span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">5</span>) {
    x = x + <span class="hljs-string">"The number is "</span> + i;
    i++;
}
</code></pre>
<p>The Do/While Loop is a variant of the while loop. This loop will execute the code block once before checking if the condition is true. It then repeats the loop as long as the condition is true:</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">do</span> {
    <span class="hljs-comment">// code block to be executed</span>
} <span class="hljs-keyword">while</span> (condition);
</code></pre>
<p><strong>Note</strong>: Be careful to avoid infinite looping if the condition is always true!</p>

        </html> 
      </vertical>
      
     
      
     
    </sequential>
        
  </chapter>
 
  <chapter display_name="Functions" url_name="functions">
  
    <sequential display_name="Functions" url_name="functions" >
     
      
       <vertical display_name="Functions - Step 1" url_name="functions-1">
        <html display_name="Functions - Step 1">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h1 id="functions">Functions</h1>
<p>Functions, are one of the most powerful and essential notions in programming.</p>
<p>Functions like mathematical functions perform transformations, they take input values called <strong>arguments</strong> and <strong>return</strong> an output value.</p>

        </html> 
      </vertical>
      
     
    </sequential>
  
    <sequential display_name="Declare" url_name="declare" >
     
      
       <vertical display_name="Declare - Step 1" url_name="declare-1">
        <html display_name="Declare - Step 1">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h1 id="declaring-functions">Declaring Functions</h1>
<p>Functions, like variables, must be declared. Let&#39;s declare a function <code>double</code> that accepts an <strong>argument</strong> called <code>x</code> and <strong>returns</strong> the double of x :</p>
<pre><code class="lang-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">double</span><span class="hljs-params">(x)</span> </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * x;
}
</code></pre>
<blockquote>
<p><em>Note:</em> the function above <strong>may</strong> be referenced before it has been defined.</p>
</blockquote>
<p>Functions are also values in JavaScript; they can be stored in variables (just like numbers, strings, etc ...) and given to other functions as arguments :</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> double = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(x)</span> </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * x;
};
</code></pre>
<blockquote>
<p><em>Note:</em> the function above <strong>may not</strong> be referenced before it is defined, just like any other variable. </p>
</blockquote>

        </html> 
      </vertical>
      
     
      
     
    </sequential>
  
    <sequential display_name="Higher order" url_name="higher-order" >
     
      
       <vertical display_name="Higher order - Step 1" url_name="higher-order-1">
        <html display_name="Higher order - Step 1">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h1 id="higher-order-functions">Higher Order Functions</h1>
<p>Higher order functions are functions that manipulate other functions.
For example, a function can take other functions as arguments and/or produce a function as its return value.
Such <em>fancy</em> functional techniques are powerful constructs available to you in JavaScript and other high-level languages like python, lisp, etc.</p>
<p>We will now create two simple functions, <code>add_2</code> and <code>double</code>, and a higher order function called <code>map</code>. <code>map</code> will accept two arguments, <code>func</code> and <code>list</code> (its declaration will therefore begin <code>map(func,list)</code>), and return an array. <code>func</code> (the first argument) will be a function that will be applied to each of the elements in the array <code>list</code> (the second argument).</p>
<pre><code class="lang-javascript"><span class="hljs-comment">// Define two simple functions</span>
<span class="hljs-keyword">var</span> add_2 = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(x)</span> </span>{
    <span class="hljs-keyword">return</span> x + <span class="hljs-number">2</span>;
};
<span class="hljs-keyword">var</span> double = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(x)</span> </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * x;
};

<span class="hljs-comment">// map is cool function that accepts 2 arguments:</span>
<span class="hljs-comment">//  func    the function to call</span>
<span class="hljs-comment">//  list    a array of values to call func on</span>
<span class="hljs-keyword">var</span> map = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(func, list)</span> </span>{
    <span class="hljs-keyword">var</span> output=[];              <span class="hljs-comment">// output list</span>
    <span class="hljs-keyword">for</span>(idx <span class="hljs-keyword">in</span> list) {
        output.push( func(list[idx]) );
    }
    <span class="hljs-keyword">return</span> output;
}


<span class="hljs-comment">// We use map to apply a function to an entire list</span>
<span class="hljs-comment">// of inputs to "map" them to a list of corresponding outputs</span>
map(add_2, [<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]) <span class="hljs-comment">// =&gt; [7, 8, 9]</span>
map(double, [<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]) <span class="hljs-comment">// =&gt; [10, 12, 14]</span>
</code></pre>
<p>The functions in the above example are simple. However, when passed as arguments to other functions, they can be composed in unforeseen ways to build more complex functions.</p>
<p>For example, if we notice that we use the invocations <code>map(add_2, ...)</code> and <code>map(double, ...)</code> very often in our code, we could decide we want to create two special-purpose list processing functions that have the desired operation baked into them. Using function composition, we could do this as follows:</p>
<pre><code class="lang-javascript">process_add_2 = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(list)</span> </span>{
    <span class="hljs-keyword">return</span> map(add_2, list);
}
process_double = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(list)</span> </span>{
    <span class="hljs-keyword">return</span> map(double, list);
}
process_add_2([<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]) <span class="hljs-comment">// =&gt; [7, 8, 9]</span>
process_double([<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]) <span class="hljs-comment">// =&gt; [10, 12, 14]</span>
</code></pre>
<p>Now let&#39;s create a function called <code>buildProcessor</code> that takes a function <code>func</code> as input
and returns a <code>func</code>-processor, that is, a function that applies <code>func</code> to each input in list.</p>
<pre><code class="lang-javascript"><span class="hljs-comment">// a function that generates a list processor that performs</span>
<span class="hljs-keyword">var</span> buildProcessor = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(func)</span> </span>{
    <span class="hljs-keyword">var</span> process_func = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(list)</span> </span>{
        <span class="hljs-keyword">return</span> map(func, list);
    }
    <span class="hljs-keyword">return</span> process_func;
}
<span class="hljs-comment">// calling buildProcessor returns a function which is called with a list input</span>


<span class="hljs-comment">// using buildProcessor we could generate the add_2 and double list processors as follows:</span>
process_add_2 = buildProcessor(add_2);
process_double = buildProcessor(double);

process_add_2([<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]) <span class="hljs-comment">// =&gt; [7, 8, 9]</span>
process_double([<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]) <span class="hljs-comment">// =&gt; [10, 12, 14]</span>
</code></pre>
<p>Let&#39;s look at another example.
We&#39;ll create a function called <code>buildMultiplier</code> that takes a number <code>x</code> as input and returns a function that multiplies its argument by <code>x</code> :</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> buildMultiplier = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(x)</span> </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(y)</span> </span>{
        <span class="hljs-keyword">return</span> x * y;
    }
}

<span class="hljs-keyword">var</span> double = buildMultiplier(<span class="hljs-number">2</span>);
<span class="hljs-keyword">var</span> triple = buildMultiplier(<span class="hljs-number">3</span>);

double(<span class="hljs-number">3</span>); <span class="hljs-comment">// =&gt; 6</span>
triple(<span class="hljs-number">3</span>); <span class="hljs-comment">// =&gt; 9</span>
</code></pre>

        </html> 
      </vertical>
      
     
      
     
    </sequential>
        
  </chapter>
 
  <chapter display_name="Objects" url_name="objects">
  
    <sequential display_name="Objects" url_name="objects" >
     
      
       <vertical display_name="Objects - Step 1" url_name="objects-1">
        <html display_name="Objects - Step 1">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h1 id="objects">Objects</h1>
<p>The primitive types of JavaScript are <code>true</code>, <code>false</code>, numbers, strings, <code>null</code> and <code>undefined</code>. <strong>Every other value is an <code>object</code>.</strong></p>
<p>In JavaScript objects contain <code>propertyName</code>: <code>propertyValue</code> pairs.</p>

        </html> 
      </vertical>
      
     
    </sequential>
  
    <sequential display_name="Creation" url_name="creation" >
     
      
       <vertical display_name="Creation - Step 1" url_name="creation-1">
        <html display_name="Creation - Step 1">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h1 id="creation">Creation</h1>
<p>There are two ways to create an <code>object</code> in JavaScript:</p>
<ol>
<li><p>literal</p>
<pre><code class="lang-js"> <span class="hljs-keyword">var</span> object = {};
  <span class="hljs-comment">// Yes, simply a pair of curly braces!</span>
</code></pre>
<blockquote>
<p><strong><em>Note:</em></strong> this is the <strong>recomended</strong> way.</p>
</blockquote>
</li>
<li><p>and object-oriented</p>
<pre><code class="lang-js"> <span class="hljs-keyword">var</span> object = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();
</code></pre>
<blockquote>
<p><strong><em>Note:</em></strong> it&#39;s almost like Java.</p>
</blockquote>
</li>
</ol>

        </html> 
      </vertical>
      
     
    </sequential>
  
    <sequential display_name="Properties" url_name="properties" >
     
      
       <vertical display_name="Properties - Step 1" url_name="properties-1">
        <html display_name="Properties - Step 1">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h1 id="properties">Properties</h1>
<p>Object&#39;s property is a <code>propertyName</code>: <code>propertyValue</code> pair, where <strong>property name can be only a string</strong>. If it&#39;s not a string, it gets casted into a string. You can specify properties <strong>when creating</strong> an object <strong>or later</strong>. There may be zero or more properties separated by commas.</p>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> language = {
    name: <span class="hljs-string">'JavaScript'</span>,
    isSupportedByBrowsers: <span class="hljs-literal">true</span>,
    createdIn: <span class="hljs-number">1995</span>,
    author:{
        firstName: <span class="hljs-string">'Brendan'</span>,
        lastName: <span class="hljs-string">'Eich'</span>
    },
 <span class="hljs-comment">// Yes, objects can be nested!</span>
    getAuthorFullName: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.author.firstName + <span class="hljs-string">" "</span> + <span class="hljs-keyword">this</span>.author.lastName;    
    }
 <span class="hljs-comment">// Yes, functions can be values too!</span>
};
</code></pre>
<p>The following code demonstates how to <strong>get</strong> a property&#39;s value.</p>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> variable = language.name;
 <span class="hljs-comment">// variable now contains "JavaScript" string.</span>
    variable = language[<span class="hljs-string">'name'</span>];
 <span class="hljs-comment">// The lines above do the same thing. The difference is that the second one lets you use litteraly any string as a property name, but it's less readable. </span>
    variable = language.newProperty; 
 <span class="hljs-comment">// variable is now undefined, because we have not assigned this property yet.</span>
</code></pre>
<p>The following example shows how to <strong>add</strong> a new property <strong>or change</strong> an existing one.</p>
<pre><code class="lang-js">language.newProperty = <span class="hljs-string">'new value'</span>;
 <span class="hljs-comment">// Now the object has a new property. If the property already exists, its value will be replaced.</span>
language[<span class="hljs-string">'newProperty'</span>] = <span class="hljs-string">'changed value'</span>;
 <span class="hljs-comment">// Once again, you can access properties both ways. The first one (dot notation) is recomended.</span>
</code></pre>

        </html> 
      </vertical>
      
     
    </sequential>
  
    <sequential display_name="Mutable" url_name="mutable" >
     
      
       <vertical display_name="Mutable - Step 1" url_name="mutable-1">
        <html display_name="Mutable - Step 1">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h1 id="mutable">Mutable</h1>
<p>The difference between objects and primitive values is that <strong>we can change objects</strong>, whereas primitive values are immutable.</p>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> myPrimitive = <span class="hljs-string">"first value"</span>;
    myPrimitive = <span class="hljs-string">"another value"</span>;
 <span class="hljs-comment">// myPrimitive now points to another string.</span>
<span class="hljs-keyword">var</span> myObject = { key: <span class="hljs-string">"first value"</span>};
    myObject.key = <span class="hljs-string">"another value"</span>;
 <span class="hljs-comment">// myObject points to the same object.</span>
</code></pre>

        </html> 
      </vertical>
      
     
    </sequential>
  
    <sequential display_name="Reference" url_name="reference" >
     
      
       <vertical display_name="Reference - Step 1" url_name="reference-1">
        <html display_name="Reference - Step 1">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h1 id="reference">Reference</h1>
<p>Objects are <strong>never copied</strong>. They are passed around by reference.</p>
<pre><code class="lang-js"> <span class="hljs-comment">// Imagine I had a pizza</span>
<span class="hljs-keyword">var</span> myPizza = {slices: <span class="hljs-number">5</span>};
 <span class="hljs-comment">// And I shared it with You</span>
<span class="hljs-keyword">var</span> yourPizza = myPizza;
 <span class="hljs-comment">// I eat another slice</span>
myPizza.slices = myPizza.slices - <span class="hljs-number">1</span>;
<span class="hljs-keyword">var</span> numberOfSlicesLeft = yourPizza.slices;
 <span class="hljs-comment">// Now We have 4 slices because myPizza and yourPizza</span>
 <span class="hljs-comment">// reference to the same pizza object.</span>
<span class="hljs-keyword">var</span> a = {}, b = {}, c = {};
 <span class="hljs-comment">// a, b, and c each refer to a</span>
 <span class="hljs-comment">// different empty object</span>
a = b = c = {};
 <span class="hljs-comment">// a, b, and c all refer to</span>
 <span class="hljs-comment">// the same empty object</span>
</code></pre>

        </html> 
      </vertical>
      
     
    </sequential>
  
    <sequential display_name="Prototype" url_name="prototype" >
     
      
       <vertical display_name="Prototype - Step 1" url_name="prototype-1">
        <html display_name="Prototype - Step 1">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h1 id="prototype">Prototype</h1>
<p>Every object is linked to a prototype object from which it inherits properties.</p>
<p>All objects created from object literals (<code>{}</code>) are automatically linked to Object.prototype, which is an object that comes standard with JavaScript.</p>
<p>When a JavaScript interpreter (a module in your browser) tries to find a property, which You want to retrieve, like in the following code:</p>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> adult = {age: <span class="hljs-number">26</span>},
    retrievedProperty = adult.age;
 <span class="hljs-comment">// The line above</span>
</code></pre>
<p>First, the interpreter looks through every property the object itself has. For example, <code>adult</code> has only one own property — <code>age</code>. But besides that one it actually has a few more properties, which were inherited from Object.prototype.</p>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> stringRepresentation = adult.toString();
 <span class="hljs-comment">// the variable has value of '[object Object]'</span>
</code></pre>
<p><code>toString</code> is an Object.prototype&#39;s property, which was inherited. It has a value of a function, which returns a string representation of the object. If you want it to return a more meaningful representation, then you can override it. Simply add a new property to the adult object.</p>
<pre><code class="lang-js">adult.toString = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{
    <span class="hljs-keyword">return</span> <span class="hljs-string">"I'm "</span>+<span class="hljs-keyword">this</span>.age;
}
</code></pre>
<p>If you call the <code>toString</code> function now, the interpreter will find the new property in the object itself and stop.</p>
<p>Thus the interpreter retrieves the first property it will find on the way from the object itself and further through its prototype.</p>
<p>To set your own object as a prototype instead of the default Object.prototype, you can invoke <code>Object.create</code> as follows:</p>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> child = <span class="hljs-built_in">Object</span>.create(adult);
 <span class="hljs-comment">/* This way of creating objects lets us easily replace the default Object.prototype with the one we want. In this case, the child's prototype is the adult object. */</span>
child.age = <span class="hljs-number">8</span>;
 <span class="hljs-comment">/* Previously, child didn't have its own age property, and the interpreter had to look further to the child's prototype to find it.
 Now, when we set the child's own age, the interpreter will not go further.
 Note: adult's age is still 26. */</span>
<span class="hljs-keyword">var</span> stringRepresentation = child.toString();
 <span class="hljs-comment">// The value is "I'm 8".</span>
 <span class="hljs-comment">/* Note: we have not overridden the child's toString property, thus the adult's method will be invoked. If adult did not have toString property, then Object.prototype's toString method would be invoked, and we would get "[object Object]" instead of "I'm 8" */</span>
</code></pre>
<p><code>child</code>&#39;s prototype is <code>adult</code>, whose prototype is <code>Object.prototype</code>. This sequence of prototypes is called <strong>prototype chain</strong>.</p>

        </html> 
      </vertical>
      
     
    </sequential>
  
    <sequential display_name="Delete" url_name="delete" >
     
      
       <vertical display_name="Delete - Step 1" url_name="delete-1">
        <html display_name="Delete - Step 1">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h1 id="delete">Delete</h1>
<p><code>delete</code> can be used to <strong>remove a property</strong> from an object. It will remove a property from the
object if it has one. It will not look further in the prototype chain.
Removing a property from an object may allow a property from the prototype chain to shine through:</p>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> adult = {age:<span class="hljs-number">26</span>},
    child = <span class="hljs-built_in">Object</span>.create(adult);
    child.age = <span class="hljs-number">8</span>;

<span class="hljs-keyword">delete</span> child.age;
 <span class="hljs-comment">/* Remove age property from child, revealing the age of the prototype, because then it is not overriden. */</span>
<span class="hljs-keyword">var</span> prototypeAge = child.age;
 <span class="hljs-comment">// 26, because child does not have its own age property.</span>
</code></pre>

        </html> 
      </vertical>
      
     
    </sequential>
  
    <sequential display_name="Enumeration" url_name="enumeration" >
     
      
       <vertical display_name="Enumeration - Step 1" url_name="enumeration-1">
        <html display_name="Enumeration - Step 1">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h1 id="enumeration">Enumeration</h1>
<p>The <code>for in</code> statement can loop over all of the property names in an object. The enumeration will include functions and prototype properties.</p>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> fruit = {
    apple: <span class="hljs-number">2</span>,
    orange:<span class="hljs-number">5</span>,
    pear:<span class="hljs-number">1</span>
},
sentence = <span class="hljs-string">'I have '</span>,
quantity;
<span class="hljs-keyword">for</span> (kind <span class="hljs-keyword">in</span> fruit){
    quantity = fruit[kind];
    sentence += quantity+<span class="hljs-string">' '</span>+kind+
                (quantity===<span class="hljs-number">1</span>?<span class="hljs-string">''</span>:<span class="hljs-string">'s'</span>)+
                <span class="hljs-string">', '</span>;
}
 <span class="hljs-comment">// The following line removes the trailing coma.</span>
sentence = sentence.substr(<span class="hljs-number">0</span>,sentence.length-<span class="hljs-number">2</span>)+<span class="hljs-string">'.'</span>;
 <span class="hljs-comment">// I have 2 apples, 5 oranges, 1 pear.</span>
</code></pre>

        </html> 
      </vertical>
      
     
    </sequential>
  
    <sequential display_name="Global footprint" url_name="global-footprint" >
     
      
       <vertical display_name="Global footprint - Step 1" url_name="global-footprint-1">
        <html display_name="Global footprint - Step 1">

         
          <link rel="stylesheet" type="text/css" href='/static/client.css' />
         

         

         
          <script type='text/javascript' src='/static/client.js' />
         

         
         
         <h1 id="global-footprint">Global footprint</h1>
<p>If you are developing a module, which might be running on a web page, which also runs other modules, then you must beware the variable name overlapping.</p>
<p>Suppose we are developing a counter module:</p>
<pre><code class="lang-js"><span class="hljs-keyword">var</span> myCounter = {
    number : <span class="hljs-number">0</span>,
    plusPlus : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{
        <span class="hljs-keyword">this</span>.number : <span class="hljs-keyword">this</span>.number + <span class="hljs-number">1</span>;
    },
    isGreaterThanTen : <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.number &gt; <span class="hljs-number">10</span>;
    }
}
</code></pre>
<blockquote>
<p><strong><em>Note:</em></strong> this technique is often used with closures, to make the internal state immutable from the outside.</p>
</blockquote>
<p>The module now takes only one variable name — <code>myCounter</code>. If any other module on the page makes use of such names like <code>number</code> or <code>isGreaterThanTen</code> then it&#39;s perfectly safe, because we will not override each others values;</p>

        </html> 
      </vertical>
      
     
    </sequential>
        
  </chapter>
 
</course>
